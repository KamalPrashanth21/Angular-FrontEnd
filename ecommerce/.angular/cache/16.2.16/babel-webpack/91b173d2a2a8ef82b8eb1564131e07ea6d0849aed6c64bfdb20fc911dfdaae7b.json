{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AppComponent = class AppComponent {\n  constructor() {\n    this.name = '';\n    this.price = '';\n    this.quantity = '';\n    this.products = [];\n  }\n  /* ngOnInit() {\n     const savedProducts = localStorage.getItem('products');\n     if (savedProducts) {\n       this.products = JSON.parse(savedProducts);\n     }\n   } /*temporary fix remove it later*/\n  addProduct() {\n    const newProduct = {\n      name: this.name,\n      price: this.price,\n      quantity: this.quantity\n    };\n    this.products.push(newProduct);\n    console.log(this.products);\n    /*localStorage.setItem('products', JSON.stringify(this.products)); /*temporary fix remove it later*/\n    /*\n    Instead of delcaring an array here itself and storing the data here, we can send it to backend and fetch the response\n    from backend and use that to display here. So data from backend will be stored in products which is then undergoes property\n    binding like [products] = \"products\" so that the products can be used in the child component\n    */\n  }\n\n  isFormValid() {\n    return !!this.name && !!this.price && !!this.quantity;\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","AppComponent","constructor","name","price","quantity","products","addProduct","newProduct","push","console","log","isFormValid","__decorate","selector","templateUrl","styleUrls"],"sources":["c:\\AngularPractice\\Angular-FrontEnd\\ecommerce\\src\\app\\app.component.ts"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n    name = '';\r\n    price = '';\r\n    quantity  = '';\r\n    products: any[] = [];\r\n\r\n   /* ngOnInit() {\r\n      const savedProducts = localStorage.getItem('products');\r\n      if (savedProducts) {\r\n        this.products = JSON.parse(savedProducts);\r\n      }\r\n    } /*temporary fix remove it later*/\r\n   \r\n   addProduct(){\r\n      const newProduct = {\r\n        name : this.name,\r\n        price : this.price,\r\n        quantity : this.quantity \r\n      };\r\n      this.products.push(newProduct);\r\n      console.log(this.products); \r\n      /*localStorage.setItem('products', JSON.stringify(this.products)); /*temporary fix remove it later*/\r\n      /* \r\n      Instead of delcaring an array here itself and storing the data here, we can send it to backend and fetch the response \r\n      from backend and use that to display here. So data from backend will be stored in products which is then undergoes property\r\n      binding like [products] = \"products\" so that the products can be used in the child component\r\n      */\r\n      \r\n    }\r\n    isFormValid() : boolean{\r\n      return !!this.name && !!this.price && !!this.quantity;\r\n    }\r\n  }\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAe,eAAe;AAOzC,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAAlBC,YAAA;IACH,KAAAC,IAAI,GAAG,EAAE;IACT,KAAAC,KAAK,GAAG,EAAE;IACV,KAAAC,QAAQ,GAAI,EAAE;IACd,KAAAC,QAAQ,GAAU,EAAE;EA4BtB;EA1BC;;;;;;EAOAC,UAAUA,CAAA;IACP,MAAMC,UAAU,GAAG;MACjBL,IAAI,EAAG,IAAI,CAACA,IAAI;MAChBC,KAAK,EAAG,IAAI,CAACA,KAAK;MAClBC,QAAQ,EAAG,IAAI,CAACA;KACjB;IACD,IAAI,CAACC,QAAQ,CAACG,IAAI,CAACD,UAAU,CAAC;IAC9BE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,QAAQ,CAAC;IAC1B;IACA;;;;;EAMF;;EACAM,WAAWA,CAAA;IACT,OAAO,CAAC,CAAC,IAAI,CAACT,IAAI,IAAI,CAAC,CAAC,IAAI,CAACC,KAAK,IAAI,CAAC,CAAC,IAAI,CAACC,QAAQ;EACvD;CACD;AAhCUJ,YAAY,GAAAY,UAAA,EALxBb,SAAS,CAAC;EACTc,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EACWf,YAAY,CAgCtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}